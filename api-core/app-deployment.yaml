apiVersion: apps/v1
kind: Deployment
metadata:
  name: tc-api-core
  namespace: tc
  labels:
    app: tc-api-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tc-api-core
  template:
    metadata:
      labels:
        app: tc-api-core
    spec:
      containers:
        - name: tc-api-core
          image: lfmelo/tc-api-core:v1  # Tem que subir a imagem do app para o docker hub
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: api-configmap
                  key: SPRING_DATASOURCE_URL
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: api-configmap
                  key: SPRING_DATASOURCE_USERNAME
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: SPRING_DATASOURCE_PASSWORD
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: update
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: AWS_ACCESS_KEY_SECRET
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: api-configmap
                  key: AWS_REGION
            - name: AWS_SQS_URL_CHECKOUT
              valueFrom:
                configMapKeyRef:
                  name: api-configmap
                  key: AWS_SQS_URL_CHECKOUT
            - name: MP_API_URL
              valueFrom:
                configMapKeyRef:
                  name: api-configmap
                  key: MP_API_URL
            - name: MP_NOTIFICATION_URL
              valueFrom:
                configMapKeyRef:
                  name: api-configmap
                  key: MP_NOTIFICATION_URL
            - name: MP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: MP_TOKEN
            - name: MP_POS_ID
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: MP_POS_ID       
            - name: MP_COLLECTOR_ID
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: MP_COLLECTOR_ID                       
          livenessProbe: # Detecta se o app está saudável (senão, reinicia o container).
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30  # Tempo para o app subir antes de começar o check
            periodSeconds: 10         # Verifica a cada 10 segundos
            failureThreshold: 3       # Se falhar 3 vezes seguidas, reinicia
          readinessProbe: # Detecta se o app está pronto para receber tráfego (senão, remove do Service temporariamente).
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 10  # Começa a checar se está pronto após 10s
            periodSeconds: 5         # Verifica a cada 5 segundos
            failureThreshold: 2      # Se falhar 2 vezes, remove do load balancer
          resources:
            requests:
              cpu: "100m" # ou 0.1
              memory: "256Mi"
            limits:
              cpu: "500m" # ou 0.5
              memory: "512Mi"